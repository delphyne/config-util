apply plugin: 'eclipse'
apply plugin: 'groovy'
apply plugin: 'maven'

group = 'org.dyndns.delphyne'
version = '1.0.0'

configurations {
	provided
	compile.extendsFrom provided
}

repositories {
	mavenCentral()
	maven {
		name 'groovy-threadlocal-ast m2 repo'
		url 'http://groovy-threadlocal-ast.googlecode.com/git/repository/'
	}
}

slf4jVersion = '1.6.4'

dependencies {
	groovy 'org.codehaus.groovy:groovy:1.8.5'
	compile "org.slf4j:slf4j-api:${slf4jVersion}"
	provided 'org.dyndns.delphyne:groovy-threadlocal-ast:1.0.1', 'org.springframework:spring-core:3.1.0.RELEASE'
	testCompile 'junit:junit:4.10', "org.slf4j:slf4j-log4j12:${slf4jVersion}"
}

jar {
	manifest {
		attributes(
				'Created-By': 'Gradle',
				'Built-By': System.env['USER'] ?: System.env['USERNAME'],
				'Implementation-Title': project.name,
				'Implementation-Version': project.version,
				'Implementation-Vendor-Id': project.group,
				'Implementation-Build': ['git', 'rev-parse', '--short', 'HEAD'].execute().text
			)
	}
}

conf2ScopeMappings.with {
	addMapping(0, configurations.groovy, COMPILE)
	addMapping(0, configurations.provided, PROVIDED)
}

task sourcesJar(type: Jar, dependsOn:classes) {
	classifier = 'sources'
	from sourceSets.main.allSource
}
 
task javadocJar(type: Jar, dependsOn:javadoc) {
	classifier = 'javadoc'
	from javadoc.destinationDir
}
 
artifacts {
	archives sourcesJar
	archives javadocJar
}

uploadArchives {
	repositories {
		mavenDeployer {
			repository(url: new File('.', ".m2").canonicalFile.toURL())
		}
	}
}

task wrapper(type: Wrapper) { 
	description = 'Generate the Gradle wrapper script'
	gradleVersion = '1.0-milestone-7' 
}

